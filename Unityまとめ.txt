[規約]
　変数 -> camelCase
　関数 -> PascalCase
　private -> m_〇〇

　・デバッグ専用で変数つくりてえな～ってときは↓みたいな感じで
　　#ifdef UNITY_EDITOR
　　[SerializeField]
　　int m_dCounter = 0;
　　#endif

　・const変数作りてえな～ってときは↓みたいな感じで
　　not static -> const int m_cCounter = 0;
　　static -> static readonly int m_cCounter = 0;

　・インスペクターに出してえな～～って時は基本[SerializeField]を使おう
　・publicなゲッターほしいな～～～って時は基本プロパティを使おう (便利情報に記載)

　・後の書き方は任せる。なんなら気に入らなかったら相談しよう。人数少ないし。



[ファイル関係]
　・基本は大カテゴリー→中カテゴリー→小カテゴリーって感じでやりたい。
　　<例1>
　　　Model -> Player -> Player.fbx
　　　Material -> White.mat?拡張子忘れた

　・スクリプトは完全にそのキャラ専用とかなら↑のルールを適用して、
　　そうでないなら臨機応変に行こう。　(すでにDogGenerics, Genericsファイルなどがあります)


　・仮のファイルは、基本UserFolderに突っ込んでくれ。
　　<例2>
　　　(敵を作っているけど、とりあえず動くPlayerがいるので簡易的なスクリプトを作成する場合)
　　 　UserFolder -> Shacho -> TestPlayer.cs 
　　
　　　(自分が作業する用のシーンを用意する場合)
　　 　UserFolder -> Shacho -> ShachoSceneVer0.unity

　・とりあえず共有するファイルは、全てSharedSquareフォルダにぶっこんでやろう。
　　<例3>
　　　(とりあえず値をいじってみた仮のプレファブを共有したい)
　　　SharedSquare　-> Test.prefab



[便利情報]
　・プロパティ
　　C#最強機能の1つ。ゲッター、セッターを変数のように扱える
　　
　　<例1>
　　基本的な宣言方法。これでcounterは実質publicで使える変数になりもうした。
　　　　[SerializeField]
　　　　int m_counter = 0;

	public int counter { get { return m_counter; } set { m_counter = value; } }

　　<例2>
　　プロパティはgetのみ、setのみにする事も可能。一番使うのはgetのみのゲッター。まじ神
　　　　[SerializeField]
　　　　int m_counter = 0;

	public int counter { get { return m_counter; } }

　　<例3>
　　get, setにはアクセス指定子を付けれる。デフォルトはプロパティのアクセス指定子。(publicプロパティならpublicになる)
　　　　[SerializeField]
　　　　int m_counter = 0;

	public int counter { get { return m_counter; } private set { m_counter = value; } }

　　<例4>
　　なんとプロパティ自体を変数として宣言する事もできる。これがアホ便利。
　　しかしインスペクターに出すことはできなくなる。出したい場合は例1～3みたいな感じで行おう

	public int counter0 { get; set; } = 0;
	public int counter1 { get; private set; } = 0;

　　<上級者向け>
　　ここまで理解すると例1はpublic変数でもよくね？と思ったりもするであろう。しかし違うのが奥深い所。
　　UnityEditorという単語を聞いたことがある人もいると思う。インスペクターいじったりするやつ。
　　実は、インスペクターで変数を入力する部分をいじる場合、かならず[SerializeField]が必要になるのだ。
　　だから、特に予定がなくとも、とりあえずは例1のように実装する方が良いのである。後々なにあるかわからんしね。



　・Attribute
　　とりあえず↓見て。
　　http://tsubakit1.hateblo.jp/entry/2015/01/03/203843
　　
　　[SerializeField]は、実はAttributeのお仲間なのです。
　　↑のURL中でよく使うのはTooltipとか。後々便利だなと感じる。
　　複数使う場合は↓のようになる。
　　<例1>
　　[Tooltip("Distance of BoxCast"), SerializeField]
　　float m_distance = 1.0f;

　　見栄えがかなり変わるので、使ってみよう



　・コメントとインテリセンス
　　気づいているかもしれないけど、C#ではただのコメントを変数や関数の上に書いた場合、
　　変数や関数にカーソルをあわせても何も表示されません。
　　<例1>

　　//C++ではこう書いたりすると、カーソル合わせたらコメントがでてくるよね。
　　int counter = 0;

　　実は出す方法があります。詳しくは知らないけどC#はXMLと密接に関わっているらしく、
　　XMLチックにコメントを書くとC++のようにでてくるようになります。
　　///って入力すると多分自動ででてくる。
　　<例2>

　　　/// <summary>BoxCast result flag->Always true on hit</summary>
　　　public bool isStay { get; protected set; } = false;

　　　/// <summary>Distance of BoxCast</summary>
　　　[Tooltip("Distance of BoxCast"), SerializeField]
　　　float m_distance = 1.0f;

　　本当はXML的にはsummaryタグは概要？説明？とにかく書き方が色々素人らしいんだけど、
　　別にそこは気にしなくていいと思う。とにかくこれだけやっときゃOK。



　・classとstruct
　　C++ではclassとstructに差はほとんどないが、C#では大きな差があります。
　　
　　生成方法　class: 参照扱いの変数として生成(多分内部でnewしている)　struct: C++と同じく、直接メモリに生成されます
　　速度　　　class: 遅いが参照扱いなのでクラス間受け渡しが簡単　struct: 速いがコピーがいちいちダルい
　　アクセス　class: C++と同じ感じでいける (x.x = 3みたいなね。)　struct: メンバに対しての代入は行えない (x = new X(0)はできるけどx.x = 0はできない)
　　関数への参照渡し　class: そのままつっこめばOK。　struct: refキーワードを使う (void Z(ref X x), Z(ref x))

　　構造体は基本クラス内宣言でしか使わないと思う。



　・グローバル変数、マクロ定数
　　C#ではグローバル変数やマクロなどで宣言する定数は、C++のようにその場で宣言することができません。
　　基本的には、static classを使ってやることが多いと思う。
　　<例>
　　　static class Constants
　　　{
　　　　static readonly int cBit0 = 0x0;
　　　　static readonly int cBit1 = 0x1;

　　　　static int bit = 0;
　　　};



　・インスペクターに自作クラスを出してえ～～
　　やったらわかると思うけど、基本自作のクラスや構造体をインスペクターに出すことはできません。
　　<例1> (こうしてもインスペクターには出ない)
　　　{
　　　　struct InsideStructure
　　　　{
　　　　　int i;
　　　　};

　　　　[SerializeField]
　　　　InsideStructure structure;
　　　};
　　
　　出すためには、フィールドの指定と変数に対応したコンストラクタが必要 (コンストラクタはバージョンによって諸説あり)
　　<例2> (こうするとインスペクターに出てきます)
　　　{
	[System.Serializable] //←new!!
　　　　struct InsideStructure
　　　　{
　　　　　//↓new!!
　　　　　public InsideStructure(int i)
　　　　　{
　　　　　　this.i = i;
　　　　　}

　　　　　int i;
　　　　};

　　　　[SerializeField]
　　　　InsideStructure structure;
　　　};



　・Transformへのアクセス
　　Transformへのアクセスはget, set共にとてもコストが高い。(重い)
　　positionなどに何度もアクセスを行うなら、それぞれバッファを確保しよう！
　　そして、transformにも大量にアクセスするなら、transform自体も確保した方がよい。はず。
　　<例1>(だめな方)
　　
　　　float sam0 = transform.position.x + transform.position.y + transform.position.z;
　　　float sam1 = transform.lossyScale.x + transform.lossyScale.y + transform.lossyScale.z;
　　　float sam2 = transform.rotation.x + transform.rotation.y + transform.rotation.z + transform.rotation.w;

　　<例2>(よい方)
　　
　　　Transform thisTransform = transform;
　　　Vector3 position = thisTransform.position;
　　　Vector3 scale = thisTransform.lossyScale;
　　　Quaternion rotation = thisTransform.rotation;

　　　float sam0 = position.x + position.y + position.z;
　　　float sam1 = scale.x + scale.y + scale.z;
　　　float sam2 = rotation.x + rotation.y + rotation.z + rotation.w;
